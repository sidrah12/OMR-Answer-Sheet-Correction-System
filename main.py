import cv2
import numpy as np
import os

# ------------ CONFIG ------------
OMR_FOLDER = "omr_sheets/"
ANSWER_KEY_FILE = "answer_key.txt"
OPTIONS = ["A", "B", "C", "D"]
# --------------------------------

# TODO: Update these coordinates for your OMR layout
# Format: { question_number: [ (x,y,w,h), (x,y,w,h), (x,y,w,h), (x,y,w,h) ] }
# Each question has 4 bubbles (A,B,C,D)
BUBBLE_COORDS = {
    1: [(106, 207, 13, 12), (135, 207, 15, 11), (167, 207, 13, 15), (197, 207, 12, 12)],
    2: [(106, 228, 13, 12), (135, 228, 16, 15), (167, 228, 13, 15), (197, 228, 12, 12)],
    3: [(106, 249, 13, 12), (135, 249, 16, 15), (167, 249, 13, 15), (197, 249, 12, 12)],
    4: [(106, 270, 13, 12), (135, 270, 16, 15), (167, 270, 13, 15), (197, 270, 12, 12)],
    5: [(106, 292, 13, 12), (135, 292, 16, 15), (167, 292, 13, 15), (197, 292, 12, 12)],
    6: [(106, 313, 13, 12), (135, 313, 16, 15), (167, 313, 13, 15), (197, 313, 12, 12)],
    7: [(106, 334, 13, 12), (135, 334, 16, 15), (167, 334, 13, 15), (197, 334, 12, 12)],
    8: [(106, 355, 13, 12), (135, 355, 16, 15), (167, 355, 13, 15), (197, 355, 12, 12)],
    9: [(106, 376, 13, 12), (135, 376, 16, 15), (167, 376, 13, 15), (197, 376, 12, 12)],
    10: [(106, 398, 13, 12), (135, 398, 16, 15), (167, 398, 13, 15), (197, 398, 12, 12)],
    11: [(292, 206, 13, 12), (321, 206, 16, 15), (351, 206, 13, 15), (380, 206, 12, 12)],
    12: [(292, 227, 13, 12), (321, 227, 16, 15), (351, 227, 13, 15), (380, 227, 12, 12)],
    13: [(292, 248, 13, 12), (321, 248, 16, 15), (351, 248, 13, 15), (380, 248, 12, 12)],
    14: [(292, 269, 13, 12), (321, 269, 16, 15), (351, 269, 13, 15), (380, 269, 12, 12)],
    15: [(292, 292, 13, 12), (321, 292, 16, 15), (351, 292, 13, 15), (380, 292, 12, 12)],
    16: [(292, 312, 13, 12), (321, 312, 16, 15), (351, 312, 13, 15), (380, 312, 12, 12)],
    17: [(292, 333, 13, 12), (321, 333, 16, 15), (351, 333, 13, 15), (380, 333, 12, 12)],
    18: [(292, 355, 13, 12), (321, 355, 16, 15), (351, 355, 13, 15), (380, 355, 12, 12)],
    19: [(292, 375, 13, 12), (321, 375, 16, 15), (351, 375, 13, 15), (380, 375, 12, 12)],
    20: [(292, 397, 13, 12), (321, 397, 16, 15), (351, 397, 13, 15), (380, 397, 12, 12)],
    21: [(476, 206, 13, 12), (507, 206, 16, 15), (536, 206, 13, 15), (565, 206, 12, 12)],
    22: [(476, 227, 13, 12), (507, 227, 16, 15), (536, 227, 13, 15), (565, 227, 12, 12)],
    23: [(476, 249, 13, 12), (507, 249, 16, 15), (536, 249, 13, 15), (565, 249, 12, 12)],
    24: [(476, 270, 13, 12), (507, 270, 16, 15), (536, 270, 13, 15), (565, 270, 12, 12)],
    25: [(476, 291, 13, 12), (507, 291, 16, 15), (536, 291, 13, 15), (565, 291, 12, 12)],
    26: [(476, 314, 13, 12), (507, 314, 16, 15), (536, 314, 13, 15), (565, 314, 12, 12)],
    27: [(476, 334, 13, 12), (507, 334, 16, 15), (536, 334, 13, 15), (565, 334, 12, 12)],
    28: [(476, 355, 13, 12), (507, 335, 16, 15), (536, 355, 13, 15), (565, 355, 12, 12)],
    29: [(476, 376, 13, 12), (507, 376, 16, 15), (536, 376, 13, 15), (565, 376, 12, 12)],
    30: [(476, 398, 13, 12), (507, 398, 16, 15), (536, 398, 13, 15), (565, 398, 12, 12)],
    31: [(661, 206, 13, 12), (691, 206, 16, 15), (719, 206, 13, 15), (749, 206, 12, 12)],
    32: [(661, 227, 13, 12), (691, 227, 16, 15), (719, 227, 13, 15), (749, 227, 12, 12)],
    33: [(661, 249, 13, 12), (691, 249, 16, 15), (719, 249, 13, 15), (749, 249, 12, 12)],
    34: [(661, 270, 13, 12), (691, 270, 16, 15), (719, 270, 13, 15), (749, 270, 12, 12)],
    35: [(661, 291, 13, 12), (691, 291, 16, 15), (719, 291, 13, 15), (749, 291, 12, 12)],
    36: [(661, 313, 13, 12), (691, 313, 16, 15), (719, 313, 13, 15), (749, 313, 12, 12)],
    37: [(661, 333, 13, 12), (691, 333, 16, 15), (719, 333, 13, 15), (749, 333, 12, 12)],
    38: [(661, 354, 13, 12), (691, 354, 16, 15), (719, 354, 13, 15), (749, 354, 12, 12)],
    39: [(661, 375, 13, 12), (691, 375, 16, 15), (719, 375, 13, 15), (749, 375, 12, 12)],
    40: [(661, 398, 13, 12), (691, 398, 16, 15), (719, 398, 13, 15), (749, 398, 12, 12)],

    # Add for all 40 questions (measure once using Paint or helper script)
}

def load_answer_key():
    """Load correct answers from text file"""
    with open(ANSWER_KEY_FILE, "r") as f:
        return [line.strip().upper() for line in f.readlines()]

def detect_answers(img_path):
    """Detect marked answers from one OMR sheet"""
    img = cv2.imread(img_path)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    detected_answers = []

    for q_num, bubbles in BUBBLE_COORDS.items():
        bubble_darkness = []

        for (x, y, w, h) in bubbles:
            roi = gray[y:y+h, x:x+w]      # Crop bubble
            mean_val = cv2.mean(roi)[0]   # Avg intensity
            bubble_darkness.append(mean_val)

        marked_idx = int(np.argmin(bubble_darkness))  # Darkest bubble
        detected_answers.append(OPTIONS[marked_idx])

    return detected_answers

def score_answers(detected, answer_key):
    """Compare detected vs answer key"""
    score = 0
    for correct, given in zip(answer_key, detected):
        if correct == given:
            score += 1
    return score

def main():
    # Load answer key
    answer_key = load_answer_key()
    print("âœ… Answer Key:", answer_key, "\n")

    # Process each OMR image
    for file in os.listdir(OMR_FOLDER):
        if file.lower().endswith((".png", ".jpg", ".jpeg")):
            img_path = os.path.join(OMR_FOLDER, file)
            student_id = os.path.splitext(file)[0]

            detected = detect_answers(img_path)
            score = score_answers(detected, answer_key)

            print(f"Student: {student_id}")
            print(f"Detected: {detected}")
            print(f"Score: {score}/{len(answer_key)}")
            print("-" * 40)

if __name__ == "__main__":
    main()
